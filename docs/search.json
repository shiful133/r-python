[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "We are passionate about leveraging the power of geospatial data to gain valuable insights, make informed decisions, and drive innovation. Our mission is to harness the capabilities of both R and Python for geospatial analysis unlocking the potential hidden within location-based information."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Geospatial analysis is a powerful field that enables us to study, interpret, and visualize data that is related to geographic locations. It involves the exploration and manipulation of data with spatial attributes, such as latitude, longitude, and elevation. Geospatial analysis finds applications in diverse domains, including environmental monitoring, urban planning, agriculture, epidemiology, and more.\nR and Python are two popular programming languages that offer extensive support for geospatial analysis. Each language has a rich ecosystem of libraries and tools specifically designed to handle spatial data, making them the top choices for geospatial enthusiasts, researchers, and data analysts.\nR, a language initially developed for statistical computing and graphics, has grown to include a plethora of geospatial packages, such as sf, sp, and raster, which allow users to handle, visualize, and analyze spatial data seamlessly. With its straightforward syntax and strong statistical capabilities, R is an excellent option for those looking to combine advanced analytical techniques with spatial data.\nOn the other hand, Python, known for its versatility and ease of use, has become a prominent language for geospatial analysis due to libraries like Geopandas, Folium, Rasterio, and PySAL. Python’s integration with other scientific libraries, such as NumPy, Pandas, and Matplotlib, further enhances its capability to handle and analyze spatial data.\nIn this exploration of geospatial analysis in R and Python, we will delve into the fundamental concepts of working with spatial data, explore different data formats, learn how to manipulate and process geospatial datasets, perform spatial operations, and create visually appealing maps and plots. Additionally, we will showcase some real-world use cases to highlight the practical applications of geospatial analysis in various domains.\nWhether you are an environmental scientist aiming to analyze climate patterns, an urban planner seeking insights for better city development, or simply curious about the fascinating world of geospatial data, this journey through geospatial analysis in R and Python will equip you with the skills and knowledge to unlock valuable insights from spatial data and make informed decisions based on geographic context. Let’s embark on this exciting adventure together and harness the power of geospatial analysis with R and Python!"
  },
  {
    "objectID": "data-export-import.html",
    "href": "data-export-import.html",
    "title": "Data Import Export",
    "section": "",
    "text": "Reading data for analysis and exporting the results to another system for report writing can be done efficiently with R. There are multiple ways to import and export data to/from R. In this tutorial, you will learn some most common ways to read and write data with R."
  },
  {
    "objectID": "data-import-export.html",
    "href": "data-import-export.html",
    "title": "Data Import-Export in Python:",
    "section": "",
    "text": "Reading data for analysis and exporting the results to another system for report writing can be done efficiently with R. There are multiple ways to import and export data to/from R. In this tutorial, you will learn some most common ways to read and write data with R.\n\n\nIt would be best if you created a working directory in R to read and write files locally.\nBefore creating a working directory, you may check the directory of your current R session; the function getwd() will print the current working directory path as a string.\n\n\nCode\ngetwd()\n\n\n[1] \"E:/Github/r-python\"\n\n\nThe following example shows how to create the working directory in R.\n\n\n\nIt would be best if you created a working directory in R to read and write files locally.\nBefore creating a working directory, you may check the directory of your current R session; the function getwd() will print the current working directory path as a string."
  },
  {
    "objectID": "data-import-export.html#working-directory-1",
    "href": "data-import-export.html#working-directory-1",
    "title": "Data Import-Export in Python:",
    "section": "",
    "text": "It would be best if you created a working directory in R to read and write files locally.\nBefore creating a working directory, you may check the directory of your current R session; the function getwd() will print the current working directory path as a string."
  },
  {
    "objectID": "docs/Titanic_Data_ggplot2.html",
    "href": "docs/Titanic_Data_ggplot2.html",
    "title": "Geospatial Analysis in R and Python",
    "section": "",
    "text": "!pip uninstall rpy2 -y\n!pip install rpy2==3.5.1\n%load_ext rpy2.ipython\n\n\nfrom google.colab import drive\ndrive.mount('/content/drive')\n\nMounted at /content/drive\n\n\n\n%%R\n#assign(\".lib.loc\", \"drive/MyDrive/R/R_Packages/\", envir = environment(.libPaths))\nassign(\".lib.loc\", c(\"drive/MyDrive/R/R_Packages/\",\"/usr/lib/R/site-library\",\"/usr/lib/R/library\"), envir = environment(.libPaths))\n#assign(\".lib.loc\", c(\"drive/MyDrive/R/R_Packages/\",\"/usr/local/lib/R/site-library\",\"/usr/lib/R/site-library\",\"/usr/lib/R/library\"), envir = environment(.libPaths))\n\n.libPaths()\n\n[1] \"drive/MyDrive/R/R_Packages/\" \"/usr/lib/R/site-library\"    \n[3] \"/usr/lib/R/library\"         \n\n\n\n%%R\nlibrary(ggplot2)\nlibrary(tidyverse)\ntitanic <- read.csv('https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv')\nhead(titanic)\n\n  PassengerId Survived Pclass\n1           1        0      3\n2           2        1      1\n3           3        1      3\n4           4        1      1\n5           5        0      3\n6           6        0      3\n                                                 Name    Sex Age SibSp Parch\n1                             Braund, Mr. Owen Harris   male  22     1     0\n2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0\n3                              Heikkinen, Miss. Laina female  26     0     0\n4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0\n5                            Allen, Mr. William Henry   male  35     0     0\n6                                    Moran, Mr. James   male  NA     0     0\n            Ticket    Fare Cabin Embarked\n1        A/5 21171  7.2500              S\n2         PC 17599 71.2833   C85        C\n3 STON/O2. 3101282  7.9250              S\n4           113803 53.1000  C123        S\n5           373450  8.0500              S\n6           330877  8.4583              Q\n\n\n\n%%R\n#setup factors\ntitanic$Pclass <- as.factor(titanic$Pclass)\ntitanic$Survived <- as.factor(titanic$Survived)\ntitanic$Sex <- as.factor(titanic$Sex)\ntitanic$Embarked <- as.factor(titanic$Embarked)\n\n\n%%R\nggplot(titanic, aes(x = Survived))+\ngeom_bar()\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Survived))+\ngeom_bar()\n\nprop.table(table(titanic$Survived))\n\n\n        0         1 \n0.6161616 0.3838384 \n\n\n\n%%R\nggplot(titanic, aes(x = Sex, fill=Survived))+\n  geom_bar()+\n  theme_bw()+\n  labs(y=\"Number\",\n       title=\"Titanic Survival Rate\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Pclass, fill=Survived))+\n  geom_bar()+\n  theme_bw()+\n  labs(y=\"Number\",\n       title=\"Titanic Survival Rate\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Sex, fill=Survived))+\n  geom_bar()+\n  theme_bw()+\n  facet_wrap(~ Pclass)+\n  labs(y=\"Number\",\n       title=\"Titanic Survival Rate\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Age))+\n  geom_histogram(binwidth=5)+\n  theme_bw()+\n  labs(y=\"Number\",\n       x = \"Age (binwidth = 5)\",\n       title=\"Titanic Age Distribution\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Age, fill=Survived))+\n  geom_histogram(binwidth=5)+\n  theme_bw()+\n  labs(y=\"Number\",\n       x = \"Age (binwidth = 5)\",\n       title=\"Titanic Age Distribution\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Survived, y=Age))+\n  geom_boxplot()+\n  theme_bw()+\n  labs(y=\"Age\",\n       x = \"Survived\",\n       title=\"Titanic Age Distribution\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Age, fill=Survived))+\n  geom_density(alpha=.5)+\n  theme_bw()+\n  facet_wrap(Sex~Pclass)+\n  labs(y=\"Number\",\n       x = \"Age\",\n       title=\"Titanic Survival Rate by Age, Pclass, Sex\"\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Age, fill=Survived))+\n  geom_histogram(alpha=.5,binwidth=5)+\n  theme_bw()+\n  facet_wrap(Sex~Pclass)+\n  labs(y=\"Number\",\n       x = \"Age\",\n       title=\"Titanic Survival Rate by Age, Pclass, Sex\"\n       )\n\n\n\n\n\n%%R\n#install.packages(\"rgee\", lib='drive/MyDrive/R/R_Packages/')\nlibrary(rgee)\nlibrary(sf)\nlibrary(raster)"
  },
  {
    "objectID": "Titanic_Data_ggplot2.html",
    "href": "Titanic_Data_ggplot2.html",
    "title": "Geospatial Analysis in R and Python",
    "section": "",
    "text": "print('Hello World!')\n\nHello World!\n\n\n\n!pip uninstall rpy2 -y\n!pip install rpy2==3.5.1\n%load_ext rpy2.ipython\n\n\nfrom google.colab import drive\ndrive.mount('/content/drive')\n\nMounted at /content/drive\n\n\n\n%%R\n#assign(\".lib.loc\", \"drive/MyDrive/R/R_Packages/\", envir = environment(.libPaths))\nassign(\".lib.loc\", c(\"drive/MyDrive/R/R_Packages/\",\"/usr/lib/R/site-library\",\"/usr/lib/R/library\"), envir = environment(.libPaths))\n#assign(\".lib.loc\", c(\"drive/MyDrive/R/R_Packages/\",\"/usr/local/lib/R/site-library\",\"/usr/lib/R/site-library\",\"/usr/lib/R/library\"), envir = environment(.libPaths))\n\n.libPaths()\n\n[1] \"drive/MyDrive/R/R_Packages/\" \"/usr/lib/R/site-library\"    \n[3] \"/usr/lib/R/library\"         \n\n\n\n%%R\nlibrary(ggplot2)\nlibrary(tidyverse)\ntitanic <- read.csv('https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv')\nhead(titanic)\n\n  PassengerId Survived Pclass\n1           1        0      3\n2           2        1      1\n3           3        1      3\n4           4        1      1\n5           5        0      3\n6           6        0      3\n                                                 Name    Sex Age SibSp Parch\n1                             Braund, Mr. Owen Harris   male  22     1     0\n2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0\n3                              Heikkinen, Miss. Laina female  26     0     0\n4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0\n5                            Allen, Mr. William Henry   male  35     0     0\n6                                    Moran, Mr. James   male  NA     0     0\n            Ticket    Fare Cabin Embarked\n1        A/5 21171  7.2500              S\n2         PC 17599 71.2833   C85        C\n3 STON/O2. 3101282  7.9250              S\n4           113803 53.1000  C123        S\n5           373450  8.0500              S\n6           330877  8.4583              Q\n\n\n\n%%R\n#setup factors\ntitanic$Pclass <- as.factor(titanic$Pclass)\ntitanic$Survived <- as.factor(titanic$Survived)\ntitanic$Sex <- as.factor(titanic$Sex)\ntitanic$Embarked <- as.factor(titanic$Embarked)\n\n\n%%R\nggplot(titanic, aes(x = Survived))+\ngeom_bar()\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Survived))+\ngeom_bar()\n\nprop.table(table(titanic$Survived))\n\n\n        0         1 \n0.6161616 0.3838384 \n\n\n\n%%R\nggplot(titanic, aes(x = Sex, fill=Survived))+\n  geom_bar()+\n  theme_bw()+\n  labs(y=\"Number\",\n       title=\"Titanic Survival Rate\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Pclass, fill=Survived))+\n  geom_bar()+\n  theme_bw()+\n  labs(y=\"Number\",\n       title=\"Titanic Survival Rate\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Sex, fill=Survived))+\n  geom_bar()+\n  theme_bw()+\n  facet_wrap(~ Pclass)+\n  labs(y=\"Number\",\n       title=\"Titanic Survival Rate\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Age))+\n  geom_histogram(binwidth=5)+\n  theme_bw()+\n  labs(y=\"Number\",\n       x = \"Age (binwidth = 5)\",\n       title=\"Titanic Age Distribution\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Age, fill=Survived))+\n  geom_histogram(binwidth=5)+\n  theme_bw()+\n  labs(y=\"Number\",\n       x = \"Age (binwidth = 5)\",\n       title=\"Titanic Age Distribution\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Survived, y=Age))+\n  geom_boxplot()+\n  theme_bw()+\n  labs(y=\"Age\",\n       x = \"Survived\",\n       title=\"Titanic Age Distribution\",\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Age, fill=Survived))+\n  geom_density(alpha=.5)+\n  theme_bw()+\n  facet_wrap(Sex~Pclass)+\n  labs(y=\"Number\",\n       x = \"Age\",\n       title=\"Titanic Survival Rate by Age, Pclass, Sex\"\n       )\n\n\n\n\n\n%%R\nggplot(titanic, aes(x = Age, fill=Survived))+\n  geom_histogram(alpha=.5,binwidth=5)+\n  theme_bw()+\n  facet_wrap(Sex~Pclass)+\n  labs(y=\"Number\",\n       x = \"Age\",\n       title=\"Titanic Survival Rate by Age, Pclass, Sex\"\n       )\n\n\n\n\n\n%%R\n#install.packages(\"rgee\", lib='drive/MyDrive/R/R_Packages/')\nlibrary(rgee)\nlibrary(sf)\nlibrary(raster)"
  },
  {
    "objectID": "R_Titanic_Data_ggplot2.html",
    "href": "R_Titanic_Data_ggplot2.html",
    "title": "Geospatial Analysis in R and Python",
    "section": "",
    "text": "Code\n!pip uninstall rpy2 -y\n!pip install rpy2==3.5.1\n%load_ext rpy2.ipython\n\n\n\n\nCode\nfrom google.colab import drive\ndrive.mount('/content/drive')\n\n\nMounted at /content/drive\n\n\n\n\nCode\n%%R\n#assign(\".lib.loc\", \"drive/MyDrive/R/R_Packages/\", envir = environment(.libPaths))\nassign(\".lib.loc\", c(\"drive/MyDrive/R/R_Packages/\",\"/usr/lib/R/site-library\",\"/usr/lib/R/library\"), envir = environment(.libPaths))\n#assign(\".lib.loc\", c(\"drive/MyDrive/R/R_Packages/\",\"/usr/local/lib/R/site-library\",\"/usr/lib/R/site-library\",\"/usr/lib/R/library\"), envir = environment(.libPaths))\n\n.libPaths()\n\n\n[1] \"drive/MyDrive/R/R_Packages/\" \"/usr/lib/R/site-library\"    \n[3] \"/usr/lib/R/library\"         \n\n\n\n\nCode\n%%R\nlibrary(ggplot2)\nlibrary(tidyverse)\ntitanic &lt;- read.csv('https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv')\nhead(titanic)\n\n\n  PassengerId Survived Pclass\n1           1        0      3\n2           2        1      1\n3           3        1      3\n4           4        1      1\n5           5        0      3\n6           6        0      3\n                                                 Name    Sex Age SibSp Parch\n1                             Braund, Mr. Owen Harris   male  22     1     0\n2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0\n3                              Heikkinen, Miss. Laina female  26     0     0\n4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0\n5                            Allen, Mr. William Henry   male  35     0     0\n6                                    Moran, Mr. James   male  NA     0     0\n            Ticket    Fare Cabin Embarked\n1        A/5 21171  7.2500              S\n2         PC 17599 71.2833   C85        C\n3 STON/O2. 3101282  7.9250              S\n4           113803 53.1000  C123        S\n5           373450  8.0500              S\n6           330877  8.4583              Q\n\n\n\n\nCode\n%%R\n#setup factors\ntitanic$Pclass &lt;- as.factor(titanic$Pclass)\ntitanic$Survived &lt;- as.factor(titanic$Survived)\ntitanic$Sex &lt;- as.factor(titanic$Sex)\ntitanic$Embarked &lt;- as.factor(titanic$Embarked)\n\n\n\n\nCode\n%%R\nggplot(titanic, aes(x = Survived))+\ngeom_bar()\n\n\n\n\n\n\n\nCode\n%%R\nggplot(titanic, aes(x = Survived))+\ngeom_bar()\n\nprop.table(table(titanic$Survived))\n\n\n\n        0         1 \n0.6161616 0.3838384 \n\n\n\n\nCode\n%%R\nggplot(titanic, aes(x = Sex, fill=Survived))+\n  geom_bar()+\n  theme_bw()+\n  labs(y=\"Number\",\n       title=\"Titanic Survival Rate\",\n       )\n\n\n\n\n\n\n\nCode\n%%R\nggplot(titanic, aes(x = Pclass, fill=Survived))+\n  geom_bar()+\n  theme_bw()+\n  labs(y=\"Number\",\n       title=\"Titanic Survival Rate\",\n       )\n\n\n\n\n\n\n\nCode\n%%R\nggplot(titanic, aes(x = Sex, fill=Survived))+\n  geom_bar()+\n  theme_bw()+\n  facet_wrap(~ Pclass)+\n  labs(y=\"Number\",\n       title=\"Titanic Survival Rate\",\n       )\n\n\n\n\n\n\n\nCode\n%%R\nggplot(titanic, aes(x = Age))+\n  geom_histogram(binwidth=5)+\n  theme_bw()+\n  labs(y=\"Number\",\n       x = \"Age (binwidth = 5)\",\n       title=\"Titanic Age Distribution\",\n       )\n\n\n\n\n\n\n\nCode\n%%R\nggplot(titanic, aes(x = Age, fill=Survived))+\n  geom_histogram(binwidth=5)+\n  theme_bw()+\n  labs(y=\"Number\",\n       x = \"Age (binwidth = 5)\",\n       title=\"Titanic Age Distribution\",\n       )\n\n\n\n\n\n\n\nCode\n%%R\nggplot(titanic, aes(x = Survived, y=Age))+\n  geom_boxplot()+\n  theme_bw()+\n  labs(y=\"Age\",\n       x = \"Survived\",\n       title=\"Titanic Age Distribution\",\n       )\n\n\n\n\n\n\n\nCode\n%%R\nggplot(titanic, aes(x = Age, fill=Survived))+\n  geom_density(alpha=.5)+\n  theme_bw()+\n  facet_wrap(Sex~Pclass)+\n  labs(y=\"Number\",\n       x = \"Age\",\n       title=\"Titanic Survival Rate by Age, Pclass, Sex\"\n       )\n\n\n\n\n\n\n\nCode\n%%R\nggplot(titanic, aes(x = Age, fill=Survived))+\n  geom_histogram(alpha=.5,binwidth=5)+\n  theme_bw()+\n  facet_wrap(Sex~Pclass)+\n  labs(y=\"Number\",\n       x = \"Age\",\n       title=\"Titanic Survival Rate by Age, Pclass, Sex\"\n       )\n\n\n\n\n\n\n\nCode\n%%R\n#install.packages(\"rgee\", lib='drive/MyDrive/R/R_Packages/')\nlibrary(rgee)\nlibrary(sf)\nlibrary(raster)"
  },
  {
    "objectID": "data-import-export.html#working-directory-1-1",
    "href": "data-import-export.html#working-directory-1-1",
    "title": "Data Import-Export in Python:",
    "section": "Working directory 1",
    "text": "Working directory 1\nIt would be best if you created a working directory in R to read and write files locally.\nBefore creating a working directory, you may check the directory of your current R session; the function getwd() will print the current working directory path as a string.\n\n\n\nImporting and exporting data in Google Colab, which is a popular platform for working with Python notebooks, involves using various libraries and methods to handle different file formats. Here’s a brief guide on how to perform data import and export in Python Colab:\n\nWorking Directory\nIn Google Colab, the working directory is set to the root directory by default. This root directory contains the Colab notebooks, and you can access files from your Google Drive as well. However, if you want to navigate and work within a specific directory, you can use the %cd magic command to change the current directory. Here’s how you can get and change the working directory in Google Colab:\n\nGet Current Working Directory:\n\n\nCode\nimport os\n\n# Get current working directory\ncurrent_directory = os.getcwd()\nprint(\"Current Directory:\", current_directory)\n\n\nCurrent Directory: /content\n\n\n\n\nMounting Google Drive:\nIf you want to access files from your Google Drive or change working directory to a folder in Google Drive, you’ll need to mount your Google Drive using the drive.mount() function.\n\n\nCode\nfrom google.colab import drive\n\ndrive.mount('/content/drive')  # Mount Google Drive\n\n\nMounted at /content/drive\n\n\n###Change Working Directory:\n\n\nCode\n# Change working directory\nnew_directory = '/content/drive/MyDrive/Python'  # Replace with your desired directory path\n%cd \"$new_directory\"\n\n\n/content/drive/MyDrive/Python\n\n\n\n\nCheck Files in the Directory:\n\n\nCode\n# check files in any directory\nos.listdir('/content/drive/MyDrive/Python')\n# or just os.listdir() for current working directory\n\n\n##Read/Import Data into Python:\n\n\nReading CSV Files:\nYou can use the pandas library to read CSV files in Colab. If the file is hosted online, you can directly provide the URL. If the file is uploaded to Colab, you can use the file upload widget.\n\n\nCode\nimport pandas as pd\n\n\n\nRead from Google Drive:\n\n\nCode\ndata_folder_drive = \"/content/drive/MyDrive/data/\"\ntest_data_csv = pd.read_csv(data_folder_drive + \"test_data.csv\")\ntest_data_csv.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n\n\nRead from URL:\n\n\nCode\ndata_folder = \"https://github.com/shiful133/data/raw/main/soil_data/\"\n\ntest_data_csv = pd.read_csv(data_folder + \"test_data.csv\")\ntest_data_csv.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n\n\n\nReading XLSX Files:\nYou can also use the pandas library to read XLSX files.\n\n\nCode\ntest_data_xlsx = pd.read_excel(data_folder + \"test_data.xlsx\") # data_folder variable defined in previous code block\n# Get Column names of dataframe\ncolumn_names = test_data_xlsx.columns.tolist()\nprint(column_names)\n\n\n['ID', 'treat', 'var', 'rep', 'PH', 'TN', 'PN', 'GW', 'ster', 'DTM', 'SW', 'GAs', 'STAs']\n\n\n###Reading .txt Files: You can use pandas to read TXT files. Reading tab separated, or comma separated txt file is very similar to reading CSV files. Since tab-separated values are essentially a form of delimited text, you can use the read_csv() function of pandas and specify the delimiter as a tab character.\n\n\nCode\ntest_data_txt = pd.read_csv(data_folder + \"test_data.txt\", delimiter='\\t') # data_folder variable defined in previous code block\n# Show first 5 rows for quick view with .head()\ntest_data_txt.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n###Reading files via upload:\n\n\nCode\n# Reading CSV from uploaded file\nfrom google.colab import files\nuploaded = files.upload()  # Upload the CSV file using the file upload widget\n\ndf_uploaded_csv = pd.read_csv(next(iter(uploaded)))\n\n\n\n\nCode\n# Now you can work with df_uploaded_csv\ndf_uploaded_csv.head()\n\n\n\n\nCode\ncolumn_names = test_data_csv.columns.tolist()\n\nprint(column_names)\n\n\n['ID', 'treat', 'var', 'rep', 'PH', 'TN', 'PN', 'GW', 'ster', 'DTM', 'SW', 'GAs', 'STAs']\n\n\n\n\nReading JSON Files:\nYou can use the pandas library to read JSON files into a DataFrame.\n\n\nCode\ntest_data_json = pd.read_json(data_folder + \"test_data.json\")\n# Get summary of the dataframe with .info()\ntest_data_json.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 42 entries, 0 to 41\nData columns (total 13 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   ID      42 non-null     int64  \n 1   treat   42 non-null     object \n 2   var     42 non-null     object \n 3   rep     42 non-null     int64  \n 4   PH      42 non-null     float64\n 5   TN      42 non-null     float64\n 6   PN      42 non-null     float64\n 7   GW      42 non-null     float64\n 8   ster    42 non-null     float64\n 9   DTM     42 non-null     float64\n 10  SW      42 non-null     float64\n 11  GAs     42 non-null     float64\n 12  STAs    42 non-null     float64\ndtypes: float64(9), int64(2), object(2)\nmemory usage: 4.4+ KB\n\n\n\n\nRead Stata Data Files (.dta):\nTo read .dta files in Python, you can use the pandas library, which provides support for reading Stata data files. Stata data files have the .dta extension and are commonly used in econometrics and statistics. Here’s how you can read a Stata data file using pandas:\n\n\nCode\ntest_data_dta = pd.read_stata(data_folder + \"test_data.dta\")\n# Get summary of the dataframe with .info()\nprint(test_data_dta)\n\n\nValueError: ignored\n\n\nThe provided Stata data file is of version 110, but pandas supports importing versions 105, 108, 111, 113, 114, 115, 117, 118, and 119. Since version 110 is not directly supported by pandas, you might face some compatibility issues when trying to read it using the pd.read_stata() function.\nThere are some third-party libraries, like pyreadstat, which provide more comprehensive support for reading Stata files with various versions, including version 110.\n\n\nCode\n!pip install pyreadstat\n\n\n\n\nCode\nimport pyreadstat\ntest_data_dta = pyreadstat.read_dta(data_folder_drive + \"test_data.dta\")\n# Get summary of the dataframe with .info()\nprint(test_data_dta)\n\n\n(    ID    treat        var  rep     PH    TN    PN    GW  ster    DTM     SW  \\\n0    1   Low As       BR01    1   84.0  28.3  27.7  35.7  20.5  126.0   28.4   \n1    2   Low As       BR01    2  111.7  34.0  30.0  58.1  14.8  119.0   36.7   \n2    3   Low As       BR01    3  102.3  27.7  24.0  44.6   5.8  119.7   32.9   \n3    4   Low As       BR06    1  118.0  23.3  19.7  46.4  20.3  119.0   40.0   \n4    5   Low As       BR06    2  115.3  16.7  12.3  19.9  32.3  120.0   28.2   \n5    6   Low As       BR06    3  111.0  19.0  15.3  35.9  14.9  116.3   42.3   \n6    7   Low As       BR28    1  114.3  21.7  19.3  56.2   6.1  123.7   35.4   \n7    8   Low As       BR28    2  124.0  25.3  21.0  49.2   9.2  114.3   60.6   \n8    9   Low As       BR28    3  120.3  23.0  19.0  48.6   4.2  113.3   69.8   \n9   10   Low As       BR35    1  130.0  19.7  14.7  36.6  12.1  126.0   57.3   \n10  11   Low As       BR35    2  133.3  21.0  16.3  39.9  11.5  130.7   53.0   \n11  12   Low As       BR35    3  129.0  17.7  14.3  43.0   8.7  132.3   32.6   \n12  13   Low As       BR36    1  113.0  18.0  15.7  39.0  13.2  121.7   45.8   \n13  14   Low As       BR36    2  118.3  23.0  17.3  35.8  28.0  121.7   44.1   \n14  15   Low As       BR36    3  118.3  29.7  16.3  45.8   6.9  117.0  114.3   \n15  16   Low As  Jefferson    1   96.7   8.7   8.7  15.9  21.5  121.3   16.8   \n16  17   Low As  Jefferson    2   94.7   9.7   9.7  18.0  18.6  116.7   16.7   \n17  18   Low As  Jefferson    3   97.3  12.3  10.3  18.9  16.7  116.7   19.0   \n18  19   Low As  Kaybonnet    1  134.7  11.7   9.7  34.9   7.8  115.7   35.6   \n19  20   Low As  Kaybonnet    2  120.7  15.3   9.3  28.9   4.9  114.0   29.0   \n20  21   Low As  Kaybonnet    3  123.7  12.7   9.3  32.4  10.4  113.3   29.4   \n21  22  High As       BR01    1   73.0  32.0  21.0  21.8  22.5  132.3   30.3   \n22  23  High As       BR01    2   77.0  36.3  31.0  31.7  20.1  129.3   34.3   \n23  24  High As       BR01    3   71.7  24.3  20.7  21.8  20.2  134.3   17.6   \n24  25  High As       BR06    1   97.7  20.7  14.3  21.2  11.8  131.0   25.6   \n25  26  High As       BR06    2   90.3  21.3  18.3  18.9  34.4  133.7   24.6   \n26  27  High As       BR06    3   91.0  18.3  14.3  13.2  58.2  132.7   24.5   \n27  28  High As       BR28    1   97.0  19.7  15.0  17.0  13.5  128.3   21.2   \n28  29  High As       BR28    2   92.3  26.3  17.7  21.1  21.3  126.0   28.7   \n29  30  High As       BR28    3   91.3  24.3  18.3  23.6  27.8  128.7   16.7   \n30  31  High As       BR35    1   94.3  22.7  12.3  10.0  55.9  154.0   35.2   \n31  32  High As       BR35    2  102.7  26.3  17.7  18.2  46.6  152.3   41.2   \n32  33  High As       BR35    3   97.3  22.7  14.0  22.2  52.5  151.7   43.3   \n33  34  High As       BR36    1  101.3  19.7  14.0  16.8  24.4  133.0   34.2   \n34  35  High As       BR36    2   94.7  22.0  17.7  24.5  28.5  133.7   30.8   \n35  36  High As       BR36    3   93.7  19.7  15.3  17.6  49.5  134.3   31.2   \n36  37  High As  Jefferson    1   72.7  10.3   9.0  11.5  26.6  127.0   14.2   \n37  38  High As  Jefferson    2   72.3   9.7   8.3  14.1  18.2  128.7   11.6   \n38  39  High As  Jefferson    3   80.0  13.3  11.0  23.0  12.6  127.0   16.3   \n39  40  High As  Kaybonnet    1   96.7  14.3   7.7   5.4  57.2  131.7   18.2   \n40  41  High As  Kaybonnet    2  101.0  15.7   8.0   5.2  82.8  130.7   28.7   \n41  42  High As  Kaybonnet    3  105.3  13.7  10.0  15.0  54.7  128.7   28.5   \n\n      GAs   STAs  \n0   0.762  14.60  \n1   0.722  10.77  \n2   0.858  12.69  \n3   1.053  18.23  \n4   1.130  13.72  \n5   1.011  15.97  \n6   0.965  14.49  \n7   0.969  16.02  \n8   0.893  15.25  \n9   1.358  21.23  \n10  1.359  19.37  \n11  1.290  20.30  \n12  0.832  19.23  \n13  0.903  12.34  \n14  0.932  15.78  \n15  0.610  13.50  \n16  0.605   9.32  \n17  0.629  11.41  \n18  1.005  15.89  \n19  1.020   9.30  \n20  0.946  12.59  \n21  1.482  25.41  \n22  1.548  19.12  \n23  1.564  22.27  \n24  1.451  24.15  \n25  1.413  18.77  \n26  1.396  21.46  \n27  1.521  28.49  \n28  1.553  30.96  \n29  1.698  29.73  \n30  2.448  26.22  \n31  2.493  20.97  \n32  2.458  23.59  \n33  1.881  24.75  \n34  1.997  19.40  \n35  1.934  22.08  \n36  1.897  23.45  \n37  1.872  18.60  \n38  2.007  21.02  \n39  1.888  20.27  \n40  1.889  22.51  \n41  1.767  21.39  , &lt;pyreadstat._readstat_parser.metadata_container object at 0x7e4bb72238e0&gt;)\n\n\n\n\nCode\nimport requests\n\n# Download the file using requests\nresponse = requests.get(data_folder + \"test_data.txt\")\n\nif response.status_code == 200:\n    # Extract the filename from the URL\n    filename = file_url.split(\"/\")[-1]\n # Save the content to a local file\n    with open(\"/content/\"+filename, \"wb\") as f:\n        f.write(response.content)\n    print(f\"File '{filename}' downloaded successfully.\")\nelse:\n    print(\"Failed to download the file.\")\n\n\nFile 'test_data.txt' downloaded successfully."
  },
  {
    "objectID": "data-import-export.html#working-directory",
    "href": "data-import-export.html#working-directory",
    "title": "Data Import-Export in Python:",
    "section": "",
    "text": "It would be best if you created a working directory in R to read and write files locally.\nBefore creating a working directory, you may check the directory of your current R session; the function getwd() will print the current working directory path as a string.\n\n\nCode\ngetwd()\n\n\n[1] \"E:/Github/r-python\"\n\n\nThe following example shows how to create the working directory in R."
  },
  {
    "objectID": "Python_Data_Import_Export.html",
    "href": "Python_Data_Import_Export.html",
    "title": "Data Import-Export in Python:",
    "section": "",
    "text": "Importing and exporting data in Google Colab, which is a popular platform for working with Python notebooks, involves using various libraries and methods to handle different file formats. Here’s a brief guide on how to perform data import and export in Python Colab:"
  },
  {
    "objectID": "docs/Python_Data_Import_Export.html",
    "href": "docs/Python_Data_Import_Export.html",
    "title": "Working Directory",
    "section": "",
    "text": "#Data Import-Export in Python Importing and exporting data in Google Colab, which is a popular platform for working with Python notebooks, involves using various libraries and methods to handle different file formats. Here’s a brief guide on how to perform data import and export in Python Colab:\nIn Google Colab, the working directory is set to the root directory by default. This root directory contains the Colab notebooks, and you can access files from your Google Drive as well. However, if you want to navigate and work within a specific directory, you can use the %cd magic command to change the current directory. Here’s how you can get and change the working directory in Google Colab:\n\nGet Current Working Directory:\n\n\nCode\nimport os\n\n# Get current working directory\ncurrent_directory = os.getcwd()\nprint(\"Current Directory:\", current_directory)\n\n\nCurrent Directory: /content\n\n\n\n\nMounting Google Drive:\nIf you want to access files from your Google Drive or change working directory to a folder in Google Drive, you’ll need to mount your Google Drive using the drive.mount() function.\n\n\nCode\nfrom google.colab import drive\n\ndrive.mount('/content/drive')  # Mount Google Drive\n\n\nMounted at /content/drive\n\n\n###Change Working Directory:\n\n\nCode\n# Change working directory\nnew_directory = '/content/drive/MyDrive/Python'  # Replace with your desired directory path\n%cd \"$new_directory\"\n\n\n/content/drive/MyDrive/Python\n\n\n\n\nCheck Files in the Directory:\n\n\nCode\n# check files in any directory\nos.listdir('/content/drive/MyDrive/Python')\n# or just os.listdir() for current working directory\n\n\n##Read/Import Data into Python:\n\n\nReading CSV Files:\nYou can use the pandas library to read CSV files in Colab. If the file is hosted online, you can directly provide the URL. If the file is uploaded to Colab, you can use the file upload widget.\n\n\nCode\nimport pandas as pd\n\n\n\nRead from Google Drive:\n\n\nCode\ndata_folder_drive = \"/content/drive/MyDrive/data/\"\ntest_data_csv = pd.read_csv(data_folder_drive + \"test_data.csv\")\ntest_data_csv.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n\n\nRead from URL:\n\n\nCode\ndata_folder = \"https://github.com/shiful133/data/raw/main/soil_data/\"\n\ntest_data_csv = pd.read_csv(data_folder + \"test_data.csv\")\ntest_data_csv.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n\n\n\nReading XLSX Files:\nYou can also use the pandas library to read XLSX files.\n\n\nCode\ntest_data_xlsx = pd.read_excel(data_folder + \"test_data.xlsx\") # data_folder variable defined in previous code block\n# Get Column names of dataframe\ncolumn_names = test_data_xlsx.columns.tolist()\nprint(column_names)\n\n\n['ID', 'treat', 'var', 'rep', 'PH', 'TN', 'PN', 'GW', 'ster', 'DTM', 'SW', 'GAs', 'STAs']\n\n\n###Reading .txt Files: You can use pandas to read TXT files. Reading tab separated, or comma separated txt file is very similar to reading CSV files. Since tab-separated values are essentially a form of delimited text, you can use the read_csv() function of pandas and specify the delimiter as a tab character.\n\n\nCode\ntest_data_txt = pd.read_csv(data_folder + \"test_data.txt\", delimiter='\\t') # data_folder variable defined in previous code block\n# Show first 5 rows for quick view with .head()\ntest_data_txt.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n###Reading files via upload:\n\n\nCode\n# Reading CSV from uploaded file\nfrom google.colab import files\nuploaded = files.upload()  # Upload the CSV file using the file upload widget\n\ndf_uploaded_csv = pd.read_csv(next(iter(uploaded)))\n\n\n\n\nCode\n# Now you can work with df_uploaded_csv\ndf_uploaded_csv.head()\n\n\n\n\nCode\ncolumn_names = test_data_csv.columns.tolist()\n\nprint(column_names)\n\n\n['ID', 'treat', 'var', 'rep', 'PH', 'TN', 'PN', 'GW', 'ster', 'DTM', 'SW', 'GAs', 'STAs']\n\n\n\n\nReading JSON Files:\nYou can use the pandas library to read JSON files into a DataFrame.\n\n\nCode\ntest_data_json = pd.read_json(data_folder + \"test_data.json\")\n# Get summary of the dataframe with .info()\ntest_data_json.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 42 entries, 0 to 41\nData columns (total 13 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   ID      42 non-null     int64  \n 1   treat   42 non-null     object \n 2   var     42 non-null     object \n 3   rep     42 non-null     int64  \n 4   PH      42 non-null     float64\n 5   TN      42 non-null     float64\n 6   PN      42 non-null     float64\n 7   GW      42 non-null     float64\n 8   ster    42 non-null     float64\n 9   DTM     42 non-null     float64\n 10  SW      42 non-null     float64\n 11  GAs     42 non-null     float64\n 12  STAs    42 non-null     float64\ndtypes: float64(9), int64(2), object(2)\nmemory usage: 4.4+ KB\n\n\n\n\nRead Stata Data Files (.dta):\nTo read .dta files in Python, you can use the pandas library, which provides support for reading Stata data files. Stata data files have the .dta extension and are commonly used in econometrics and statistics. Here’s how you can read a Stata data file using pandas:\n\n\nCode\ntest_data_dta = pd.read_stata(data_folder + \"test_data.dta\")\n# Get summary of the dataframe with .info()\nprint(test_data_dta)\n\n\nValueError: ignored\n\n\nThe provided Stata data file is of version 110, but pandas supports importing versions 105, 108, 111, 113, 114, 115, 117, 118, and 119. Since version 110 is not directly supported by pandas, you might face some compatibility issues when trying to read it using the pd.read_stata() function.\nThere are some third-party libraries, like pyreadstat, which provide more comprehensive support for reading Stata files with various versions, including version 110.\n\n\nCode\n!pip install pyreadstat\n\n\n\n\nCode\nimport pyreadstat\ntest_data_dta = pyreadstat.read_dta(data_folder_drive + \"test_data.dta\")\n# Get summary of the dataframe with .info()\nprint(test_data_dta)\n\n\n(    ID    treat        var  rep     PH    TN    PN    GW  ster    DTM     SW  \\\n0    1   Low As       BR01    1   84.0  28.3  27.7  35.7  20.5  126.0   28.4   \n1    2   Low As       BR01    2  111.7  34.0  30.0  58.1  14.8  119.0   36.7   \n2    3   Low As       BR01    3  102.3  27.7  24.0  44.6   5.8  119.7   32.9   \n3    4   Low As       BR06    1  118.0  23.3  19.7  46.4  20.3  119.0   40.0   \n4    5   Low As       BR06    2  115.3  16.7  12.3  19.9  32.3  120.0   28.2   \n5    6   Low As       BR06    3  111.0  19.0  15.3  35.9  14.9  116.3   42.3   \n6    7   Low As       BR28    1  114.3  21.7  19.3  56.2   6.1  123.7   35.4   \n7    8   Low As       BR28    2  124.0  25.3  21.0  49.2   9.2  114.3   60.6   \n8    9   Low As       BR28    3  120.3  23.0  19.0  48.6   4.2  113.3   69.8   \n9   10   Low As       BR35    1  130.0  19.7  14.7  36.6  12.1  126.0   57.3   \n10  11   Low As       BR35    2  133.3  21.0  16.3  39.9  11.5  130.7   53.0   \n11  12   Low As       BR35    3  129.0  17.7  14.3  43.0   8.7  132.3   32.6   \n12  13   Low As       BR36    1  113.0  18.0  15.7  39.0  13.2  121.7   45.8   \n13  14   Low As       BR36    2  118.3  23.0  17.3  35.8  28.0  121.7   44.1   \n14  15   Low As       BR36    3  118.3  29.7  16.3  45.8   6.9  117.0  114.3   \n15  16   Low As  Jefferson    1   96.7   8.7   8.7  15.9  21.5  121.3   16.8   \n16  17   Low As  Jefferson    2   94.7   9.7   9.7  18.0  18.6  116.7   16.7   \n17  18   Low As  Jefferson    3   97.3  12.3  10.3  18.9  16.7  116.7   19.0   \n18  19   Low As  Kaybonnet    1  134.7  11.7   9.7  34.9   7.8  115.7   35.6   \n19  20   Low As  Kaybonnet    2  120.7  15.3   9.3  28.9   4.9  114.0   29.0   \n20  21   Low As  Kaybonnet    3  123.7  12.7   9.3  32.4  10.4  113.3   29.4   \n21  22  High As       BR01    1   73.0  32.0  21.0  21.8  22.5  132.3   30.3   \n22  23  High As       BR01    2   77.0  36.3  31.0  31.7  20.1  129.3   34.3   \n23  24  High As       BR01    3   71.7  24.3  20.7  21.8  20.2  134.3   17.6   \n24  25  High As       BR06    1   97.7  20.7  14.3  21.2  11.8  131.0   25.6   \n25  26  High As       BR06    2   90.3  21.3  18.3  18.9  34.4  133.7   24.6   \n26  27  High As       BR06    3   91.0  18.3  14.3  13.2  58.2  132.7   24.5   \n27  28  High As       BR28    1   97.0  19.7  15.0  17.0  13.5  128.3   21.2   \n28  29  High As       BR28    2   92.3  26.3  17.7  21.1  21.3  126.0   28.7   \n29  30  High As       BR28    3   91.3  24.3  18.3  23.6  27.8  128.7   16.7   \n30  31  High As       BR35    1   94.3  22.7  12.3  10.0  55.9  154.0   35.2   \n31  32  High As       BR35    2  102.7  26.3  17.7  18.2  46.6  152.3   41.2   \n32  33  High As       BR35    3   97.3  22.7  14.0  22.2  52.5  151.7   43.3   \n33  34  High As       BR36    1  101.3  19.7  14.0  16.8  24.4  133.0   34.2   \n34  35  High As       BR36    2   94.7  22.0  17.7  24.5  28.5  133.7   30.8   \n35  36  High As       BR36    3   93.7  19.7  15.3  17.6  49.5  134.3   31.2   \n36  37  High As  Jefferson    1   72.7  10.3   9.0  11.5  26.6  127.0   14.2   \n37  38  High As  Jefferson    2   72.3   9.7   8.3  14.1  18.2  128.7   11.6   \n38  39  High As  Jefferson    3   80.0  13.3  11.0  23.0  12.6  127.0   16.3   \n39  40  High As  Kaybonnet    1   96.7  14.3   7.7   5.4  57.2  131.7   18.2   \n40  41  High As  Kaybonnet    2  101.0  15.7   8.0   5.2  82.8  130.7   28.7   \n41  42  High As  Kaybonnet    3  105.3  13.7  10.0  15.0  54.7  128.7   28.5   \n\n      GAs   STAs  \n0   0.762  14.60  \n1   0.722  10.77  \n2   0.858  12.69  \n3   1.053  18.23  \n4   1.130  13.72  \n5   1.011  15.97  \n6   0.965  14.49  \n7   0.969  16.02  \n8   0.893  15.25  \n9   1.358  21.23  \n10  1.359  19.37  \n11  1.290  20.30  \n12  0.832  19.23  \n13  0.903  12.34  \n14  0.932  15.78  \n15  0.610  13.50  \n16  0.605   9.32  \n17  0.629  11.41  \n18  1.005  15.89  \n19  1.020   9.30  \n20  0.946  12.59  \n21  1.482  25.41  \n22  1.548  19.12  \n23  1.564  22.27  \n24  1.451  24.15  \n25  1.413  18.77  \n26  1.396  21.46  \n27  1.521  28.49  \n28  1.553  30.96  \n29  1.698  29.73  \n30  2.448  26.22  \n31  2.493  20.97  \n32  2.458  23.59  \n33  1.881  24.75  \n34  1.997  19.40  \n35  1.934  22.08  \n36  1.897  23.45  \n37  1.872  18.60  \n38  2.007  21.02  \n39  1.888  20.27  \n40  1.889  22.51  \n41  1.767  21.39  , &lt;pyreadstat._readstat_parser.metadata_container object at 0x7e4bb72238e0&gt;)\n\n\n\n\nCode\nimport requests\n\n# Download the file using requests\nresponse = requests.get(data_folder + \"test_data.txt\")\n\nif response.status_code == 200:\n    # Extract the filename from the URL\n    filename = file_url.split(\"/\")[-1]\n # Save the content to a local file\n    with open(\"/content/\"+filename, \"wb\") as f:\n        f.write(response.content)\n    print(f\"File '{filename}' downloaded successfully.\")\nelse:\n    print(\"Failed to download the file.\")\n\n\nFile 'test_data.txt' downloaded successfully."
  },
  {
    "objectID": "data-import-export.html#working-directory-2",
    "href": "data-import-export.html#working-directory-2",
    "title": "Data Import-Export in Python:",
    "section": "Working Directory",
    "text": "Working Directory\nIn Google Colab, the working directory is set to the root directory by default. This root directory contains the Colab notebooks, and you can access files from your Google Drive as well. However, if you want to navigate and work within a specific directory, you can use the %cd magic command to change the current directory. Here’s how you can get and change the working directory in Google Colab:\n\nGet Current Working Directory:\n\n\nCode\nimport os\n\n# Get current working directory\ncurrent_directory = os.getcwd()\nprint(\"Current Directory:\", current_directory)\n\n\nCurrent Directory: /content\n\n\n\n\nMounting Google Drive:\nIf you want to access files from your Google Drive or change working directory to a folder in Google Drive, you’ll need to mount your Google Drive using the drive.mount() function.\n\n\nCode\nfrom google.colab import drive\n\ndrive.mount('/content/drive')  # Mount Google Drive\n\n\nMounted at /content/drive\n\n\n###Change Working Directory:\n\n\nCode\n# Change working directory\nnew_directory = '/content/drive/MyDrive/Python'  # Replace with your desired directory path\n%cd \"$new_directory\"\n\n\n/content/drive/MyDrive/Python\n\n\n\n\nCheck Files in the Directory:\n\n\nCode\n# check files in any directory\nos.listdir('/content/drive/MyDrive/Python')\n# or just os.listdir() for current working directory\n\n\n##Read/Import Data into Python:\n\n\nReading CSV Files:\nYou can use the pandas library to read CSV files in Colab. If the file is hosted online, you can directly provide the URL. If the file is uploaded to Colab, you can use the file upload widget.\n\n\nCode\nimport pandas as pd\n\n\n\nRead from Google Drive:\n\n\nCode\ndata_folder_drive = \"/content/drive/MyDrive/data/\"\ntest_data_csv = pd.read_csv(data_folder_drive + \"test_data.csv\")\ntest_data_csv.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n\n\nRead from URL:\n\n\nCode\ndata_folder = \"https://github.com/shiful133/data/raw/main/soil_data/\"\n\ntest_data_csv = pd.read_csv(data_folder + \"test_data.csv\")\ntest_data_csv.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n\n\n\nReading XLSX Files:\nYou can also use the pandas library to read XLSX files.\n\n\nCode\ntest_data_xlsx = pd.read_excel(data_folder + \"test_data.xlsx\") # data_folder variable defined in previous code block\n# Get Column names of dataframe\ncolumn_names = test_data_xlsx.columns.tolist()\nprint(column_names)\n\n\n['ID', 'treat', 'var', 'rep', 'PH', 'TN', 'PN', 'GW', 'ster', 'DTM', 'SW', 'GAs', 'STAs']\n\n\n###Reading .txt Files: You can use pandas to read TXT files. Reading tab separated, or comma separated txt file is very similar to reading CSV files. Since tab-separated values are essentially a form of delimited text, you can use the read_csv() function of pandas and specify the delimiter as a tab character.\n\n\nCode\ntest_data_txt = pd.read_csv(data_folder + \"test_data.txt\", delimiter='\\t') # data_folder variable defined in previous code block\n# Show first 5 rows for quick view with .head()\ntest_data_txt.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n###Reading files via upload:\n\n\nCode\n# Reading CSV from uploaded file\nfrom google.colab import files\nuploaded = files.upload()  # Upload the CSV file using the file upload widget\n\ndf_uploaded_csv = pd.read_csv(next(iter(uploaded)))\n\n\n\n\nCode\n# Now you can work with df_uploaded_csv\ndf_uploaded_csv.head()\n\n\n\n\nCode\ncolumn_names = test_data_csv.columns.tolist()\n\nprint(column_names)\n\n\n['ID', 'treat', 'var', 'rep', 'PH', 'TN', 'PN', 'GW', 'ster', 'DTM', 'SW', 'GAs', 'STAs']\n\n\n\n\nReading JSON Files:\nYou can use the pandas library to read JSON files into a DataFrame.\n\n\nCode\ntest_data_json = pd.read_json(data_folder + \"test_data.json\")\n# Get summary of the dataframe with .info()\ntest_data_json.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 42 entries, 0 to 41\nData columns (total 13 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   ID      42 non-null     int64  \n 1   treat   42 non-null     object \n 2   var     42 non-null     object \n 3   rep     42 non-null     int64  \n 4   PH      42 non-null     float64\n 5   TN      42 non-null     float64\n 6   PN      42 non-null     float64\n 7   GW      42 non-null     float64\n 8   ster    42 non-null     float64\n 9   DTM     42 non-null     float64\n 10  SW      42 non-null     float64\n 11  GAs     42 non-null     float64\n 12  STAs    42 non-null     float64\ndtypes: float64(9), int64(2), object(2)\nmemory usage: 4.4+ KB\n\n\n\n\nRead Stata Data Files (.dta):\nTo read .dta files in Python, you can use the pandas library, which provides support for reading Stata data files. Stata data files have the .dta extension and are commonly used in econometrics and statistics. Here’s how you can read a Stata data file using pandas:\n\n\nCode\ntest_data_dta = pd.read_stata(data_folder + \"test_data.dta\")\n# Get summary of the dataframe with .info()\nprint(test_data_dta)\n\n\nValueError: ignored\n\n\nThe provided Stata data file is of version 110, but pandas supports importing versions 105, 108, 111, 113, 114, 115, 117, 118, and 119. Since version 110 is not directly supported by pandas, you might face some compatibility issues when trying to read it using the pd.read_stata() function.\nThere are some third-party libraries, like pyreadstat, which provide more comprehensive support for reading Stata files with various versions, including version 110.\n\n\nCode\n!pip install pyreadstat\n\n\n\n\nCode\nimport pyreadstat\ntest_data_dta = pyreadstat.read_dta(data_folder_drive + \"test_data.dta\")\n# Get summary of the dataframe with .info()\nprint(test_data_dta)\n\n\n(    ID    treat        var  rep     PH    TN    PN    GW  ster    DTM     SW  \\\n0    1   Low As       BR01    1   84.0  28.3  27.7  35.7  20.5  126.0   28.4   \n1    2   Low As       BR01    2  111.7  34.0  30.0  58.1  14.8  119.0   36.7   \n2    3   Low As       BR01    3  102.3  27.7  24.0  44.6   5.8  119.7   32.9   \n3    4   Low As       BR06    1  118.0  23.3  19.7  46.4  20.3  119.0   40.0   \n4    5   Low As       BR06    2  115.3  16.7  12.3  19.9  32.3  120.0   28.2   \n5    6   Low As       BR06    3  111.0  19.0  15.3  35.9  14.9  116.3   42.3   \n6    7   Low As       BR28    1  114.3  21.7  19.3  56.2   6.1  123.7   35.4   \n7    8   Low As       BR28    2  124.0  25.3  21.0  49.2   9.2  114.3   60.6   \n8    9   Low As       BR28    3  120.3  23.0  19.0  48.6   4.2  113.3   69.8   \n9   10   Low As       BR35    1  130.0  19.7  14.7  36.6  12.1  126.0   57.3   \n10  11   Low As       BR35    2  133.3  21.0  16.3  39.9  11.5  130.7   53.0   \n11  12   Low As       BR35    3  129.0  17.7  14.3  43.0   8.7  132.3   32.6   \n12  13   Low As       BR36    1  113.0  18.0  15.7  39.0  13.2  121.7   45.8   \n13  14   Low As       BR36    2  118.3  23.0  17.3  35.8  28.0  121.7   44.1   \n14  15   Low As       BR36    3  118.3  29.7  16.3  45.8   6.9  117.0  114.3   \n15  16   Low As  Jefferson    1   96.7   8.7   8.7  15.9  21.5  121.3   16.8   \n16  17   Low As  Jefferson    2   94.7   9.7   9.7  18.0  18.6  116.7   16.7   \n17  18   Low As  Jefferson    3   97.3  12.3  10.3  18.9  16.7  116.7   19.0   \n18  19   Low As  Kaybonnet    1  134.7  11.7   9.7  34.9   7.8  115.7   35.6   \n19  20   Low As  Kaybonnet    2  120.7  15.3   9.3  28.9   4.9  114.0   29.0   \n20  21   Low As  Kaybonnet    3  123.7  12.7   9.3  32.4  10.4  113.3   29.4   \n21  22  High As       BR01    1   73.0  32.0  21.0  21.8  22.5  132.3   30.3   \n22  23  High As       BR01    2   77.0  36.3  31.0  31.7  20.1  129.3   34.3   \n23  24  High As       BR01    3   71.7  24.3  20.7  21.8  20.2  134.3   17.6   \n24  25  High As       BR06    1   97.7  20.7  14.3  21.2  11.8  131.0   25.6   \n25  26  High As       BR06    2   90.3  21.3  18.3  18.9  34.4  133.7   24.6   \n26  27  High As       BR06    3   91.0  18.3  14.3  13.2  58.2  132.7   24.5   \n27  28  High As       BR28    1   97.0  19.7  15.0  17.0  13.5  128.3   21.2   \n28  29  High As       BR28    2   92.3  26.3  17.7  21.1  21.3  126.0   28.7   \n29  30  High As       BR28    3   91.3  24.3  18.3  23.6  27.8  128.7   16.7   \n30  31  High As       BR35    1   94.3  22.7  12.3  10.0  55.9  154.0   35.2   \n31  32  High As       BR35    2  102.7  26.3  17.7  18.2  46.6  152.3   41.2   \n32  33  High As       BR35    3   97.3  22.7  14.0  22.2  52.5  151.7   43.3   \n33  34  High As       BR36    1  101.3  19.7  14.0  16.8  24.4  133.0   34.2   \n34  35  High As       BR36    2   94.7  22.0  17.7  24.5  28.5  133.7   30.8   \n35  36  High As       BR36    3   93.7  19.7  15.3  17.6  49.5  134.3   31.2   \n36  37  High As  Jefferson    1   72.7  10.3   9.0  11.5  26.6  127.0   14.2   \n37  38  High As  Jefferson    2   72.3   9.7   8.3  14.1  18.2  128.7   11.6   \n38  39  High As  Jefferson    3   80.0  13.3  11.0  23.0  12.6  127.0   16.3   \n39  40  High As  Kaybonnet    1   96.7  14.3   7.7   5.4  57.2  131.7   18.2   \n40  41  High As  Kaybonnet    2  101.0  15.7   8.0   5.2  82.8  130.7   28.7   \n41  42  High As  Kaybonnet    3  105.3  13.7  10.0  15.0  54.7  128.7   28.5   \n\n      GAs   STAs  \n0   0.762  14.60  \n1   0.722  10.77  \n2   0.858  12.69  \n3   1.053  18.23  \n4   1.130  13.72  \n5   1.011  15.97  \n6   0.965  14.49  \n7   0.969  16.02  \n8   0.893  15.25  \n9   1.358  21.23  \n10  1.359  19.37  \n11  1.290  20.30  \n12  0.832  19.23  \n13  0.903  12.34  \n14  0.932  15.78  \n15  0.610  13.50  \n16  0.605   9.32  \n17  0.629  11.41  \n18  1.005  15.89  \n19  1.020   9.30  \n20  0.946  12.59  \n21  1.482  25.41  \n22  1.548  19.12  \n23  1.564  22.27  \n24  1.451  24.15  \n25  1.413  18.77  \n26  1.396  21.46  \n27  1.521  28.49  \n28  1.553  30.96  \n29  1.698  29.73  \n30  2.448  26.22  \n31  2.493  20.97  \n32  2.458  23.59  \n33  1.881  24.75  \n34  1.997  19.40  \n35  1.934  22.08  \n36  1.897  23.45  \n37  1.872  18.60  \n38  2.007  21.02  \n39  1.888  20.27  \n40  1.889  22.51  \n41  1.767  21.39  , &lt;pyreadstat._readstat_parser.metadata_container object at 0x7e4bb72238e0&gt;)\n\n\n\n\nCode\nimport requests\n\n# Download the file using requests\nresponse = requests.get(data_folder + \"test_data.txt\")\n\nif response.status_code == 200:\n    # Extract the filename from the URL\n    filename = file_url.split(\"/\")[-1]\n # Save the content to a local file\n    with open(\"/content/\"+filename, \"wb\") as f:\n        f.write(response.content)\n    print(f\"File '{filename}' downloaded successfully.\")\nelse:\n    print(\"Failed to download the file.\")\n\n\nFile 'test_data.txt' downloaded successfully."
  },
  {
    "objectID": "Python_Data_Import_Export.html#working-directory",
    "href": "Python_Data_Import_Export.html#working-directory",
    "title": "Data Import-Export in Python:",
    "section": "Working Directory",
    "text": "Working Directory\nIn Google Colab, the working directory is set to the root directory by default. This root directory contains the Colab notebooks, and you can access files from your Google Drive as well. However, if you want to navigate and work within a specific directory, you can use the %cd magic command to change the current directory. Here’s how you can get and change the working directory in Google Colab:\n\nGet Current Working Directory:\n\n\nCode\nimport os\n\n# Get current working directory\ncurrent_directory = os.getcwd()\nprint(\"Current Directory:\", current_directory)\n\n\nCurrent Directory: /content\n\n\n\n\nMounting Google Drive:\nIf you want to access files from your Google Drive or change working directory to a folder in Google Drive, you’ll need to mount your Google Drive using the drive.mount() function.\n\n\nCode\nfrom google.colab import drive\n\ndrive.mount('/content/drive')  # Mount Google Drive\n\n\nMounted at /content/drive\n\n\n###Change Working Directory:\n\n\nCode\n# Change working directory\nnew_directory = '/content/drive/MyDrive/Python'  # Replace with your desired directory path\n%cd \"$new_directory\"\n\n\n/content/drive/MyDrive/Python\n\n\n\n\nCheck Files in the Directory:\n\n\nCode\n# check files in any directory\nos.listdir('/content/drive/MyDrive/Python')\n# or just os.listdir() for current working directory\n\n\n##Read/Import Data into Python:\n\n\nReading CSV Files:\nYou can use the pandas library to read CSV files in Colab. If the file is hosted online, you can directly provide the URL. If the file is uploaded to Colab, you can use the file upload widget.\n\n\nCode\nimport pandas as pd\n\n\n\nRead from Google Drive:\n\n\nCode\ndata_folder_drive = \"/content/drive/MyDrive/data/\"\ntest_data_csv = pd.read_csv(data_folder_drive + \"test_data.csv\")\ntest_data_csv.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n\n\nRead from URL:\n\n\nCode\ndata_folder = \"https://github.com/shiful133/data/raw/main/soil_data/\"\n\ntest_data_csv = pd.read_csv(data_folder + \"test_data.csv\")\ntest_data_csv.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n\n\n\nReading XLSX Files:\nYou can also use the pandas library to read XLSX files.\n\n\nCode\ntest_data_xlsx = pd.read_excel(data_folder + \"test_data.xlsx\") # data_folder variable defined in previous code block\n# Get Column names of dataframe\ncolumn_names = test_data_xlsx.columns.tolist()\nprint(column_names)\n\n\n['ID', 'treat', 'var', 'rep', 'PH', 'TN', 'PN', 'GW', 'ster', 'DTM', 'SW', 'GAs', 'STAs']\n\n\n###Reading .txt Files: You can use pandas to read TXT files. Reading tab separated, or comma separated txt file is very similar to reading CSV files. Since tab-separated values are essentially a form of delimited text, you can use the read_csv() function of pandas and specify the delimiter as a tab character.\n\n\nCode\ntest_data_txt = pd.read_csv(data_folder + \"test_data.txt\", delimiter='\\t') # data_folder variable defined in previous code block\n# Show first 5 rows for quick view with .head()\ntest_data_txt.head()\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\nID\ntreat\nvar\nrep\nPH\nTN\nPN\nGW\nster\nDTM\nSW\nGAs\nSTAs\n\n\n\n\n0\n1\nLow As\nBR01\n1\n84.0\n28.3\n27.7\n35.7\n20.5\n126.0\n28.4\n0.762\n14.60\n\n\n1\n2\nLow As\nBR01\n2\n111.7\n34.0\n30.0\n58.1\n14.8\n119.0\n36.7\n0.722\n10.77\n\n\n2\n3\nLow As\nBR01\n3\n102.3\n27.7\n24.0\n44.6\n5.8\n119.7\n32.9\n0.858\n12.69\n\n\n3\n4\nLow As\nBR06\n1\n118.0\n23.3\n19.7\n46.4\n20.3\n119.0\n40.0\n1.053\n18.23\n\n\n4\n5\nLow As\nBR06\n2\n115.3\n16.7\n12.3\n19.9\n32.3\n120.0\n28.2\n1.130\n13.72\n\n\n\n\n\n\n      \n\n  \n    \n    \n  \n      \n\n\n\n    \n      \n\n\n    \n        \n    \n\n      \n    \n\n\n\n    \n\n      \n      \n\n      \n    \n  \n\n\n###Reading files via upload:\n\n\nCode\n# Reading CSV from uploaded file\nfrom google.colab import files\nuploaded = files.upload()  # Upload the CSV file using the file upload widget\n\ndf_uploaded_csv = pd.read_csv(next(iter(uploaded)))\n\n\n\n\nCode\n# Now you can work with df_uploaded_csv\ndf_uploaded_csv.head()\n\n\n\n\nCode\ncolumn_names = test_data_csv.columns.tolist()\n\nprint(column_names)\n\n\n['ID', 'treat', 'var', 'rep', 'PH', 'TN', 'PN', 'GW', 'ster', 'DTM', 'SW', 'GAs', 'STAs']\n\n\n\n\nReading JSON Files:\nYou can use the pandas library to read JSON files into a DataFrame.\n\n\nCode\ntest_data_json = pd.read_json(data_folder + \"test_data.json\")\n# Get summary of the dataframe with .info()\ntest_data_json.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 42 entries, 0 to 41\nData columns (total 13 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   ID      42 non-null     int64  \n 1   treat   42 non-null     object \n 2   var     42 non-null     object \n 3   rep     42 non-null     int64  \n 4   PH      42 non-null     float64\n 5   TN      42 non-null     float64\n 6   PN      42 non-null     float64\n 7   GW      42 non-null     float64\n 8   ster    42 non-null     float64\n 9   DTM     42 non-null     float64\n 10  SW      42 non-null     float64\n 11  GAs     42 non-null     float64\n 12  STAs    42 non-null     float64\ndtypes: float64(9), int64(2), object(2)\nmemory usage: 4.4+ KB\n\n\n\n\nRead Stata Data Files (.dta):\nTo read .dta files in Python, you can use the pandas library, which provides support for reading Stata data files. Stata data files have the .dta extension and are commonly used in econometrics and statistics. Here’s how you can read a Stata data file using pandas:\n\n\nCode\ntest_data_dta = pd.read_stata(data_folder + \"test_data.dta\")\n# Get summary of the dataframe with .info()\nprint(test_data_dta)\n\n\nValueError: ignored\n\n\nThe provided Stata data file is of version 110, but pandas supports importing versions 105, 108, 111, 113, 114, 115, 117, 118, and 119. Since version 110 is not directly supported by pandas, you might face some compatibility issues when trying to read it using the pd.read_stata() function.\nThere are some third-party libraries, like pyreadstat, which provide more comprehensive support for reading Stata files with various versions, including version 110.\n\n\nCode\n!pip install pyreadstat\n\n\n\n\nCode\nimport pyreadstat\ntest_data_dta = pyreadstat.read_dta(data_folder_drive + \"test_data.dta\")\n# Get summary of the dataframe with .info()\nprint(test_data_dta)\n\n\n(    ID    treat        var  rep     PH    TN    PN    GW  ster    DTM     SW  \\\n0    1   Low As       BR01    1   84.0  28.3  27.7  35.7  20.5  126.0   28.4   \n1    2   Low As       BR01    2  111.7  34.0  30.0  58.1  14.8  119.0   36.7   \n2    3   Low As       BR01    3  102.3  27.7  24.0  44.6   5.8  119.7   32.9   \n3    4   Low As       BR06    1  118.0  23.3  19.7  46.4  20.3  119.0   40.0   \n4    5   Low As       BR06    2  115.3  16.7  12.3  19.9  32.3  120.0   28.2   \n5    6   Low As       BR06    3  111.0  19.0  15.3  35.9  14.9  116.3   42.3   \n6    7   Low As       BR28    1  114.3  21.7  19.3  56.2   6.1  123.7   35.4   \n7    8   Low As       BR28    2  124.0  25.3  21.0  49.2   9.2  114.3   60.6   \n8    9   Low As       BR28    3  120.3  23.0  19.0  48.6   4.2  113.3   69.8   \n9   10   Low As       BR35    1  130.0  19.7  14.7  36.6  12.1  126.0   57.3   \n10  11   Low As       BR35    2  133.3  21.0  16.3  39.9  11.5  130.7   53.0   \n11  12   Low As       BR35    3  129.0  17.7  14.3  43.0   8.7  132.3   32.6   \n12  13   Low As       BR36    1  113.0  18.0  15.7  39.0  13.2  121.7   45.8   \n13  14   Low As       BR36    2  118.3  23.0  17.3  35.8  28.0  121.7   44.1   \n14  15   Low As       BR36    3  118.3  29.7  16.3  45.8   6.9  117.0  114.3   \n15  16   Low As  Jefferson    1   96.7   8.7   8.7  15.9  21.5  121.3   16.8   \n16  17   Low As  Jefferson    2   94.7   9.7   9.7  18.0  18.6  116.7   16.7   \n17  18   Low As  Jefferson    3   97.3  12.3  10.3  18.9  16.7  116.7   19.0   \n18  19   Low As  Kaybonnet    1  134.7  11.7   9.7  34.9   7.8  115.7   35.6   \n19  20   Low As  Kaybonnet    2  120.7  15.3   9.3  28.9   4.9  114.0   29.0   \n20  21   Low As  Kaybonnet    3  123.7  12.7   9.3  32.4  10.4  113.3   29.4   \n21  22  High As       BR01    1   73.0  32.0  21.0  21.8  22.5  132.3   30.3   \n22  23  High As       BR01    2   77.0  36.3  31.0  31.7  20.1  129.3   34.3   \n23  24  High As       BR01    3   71.7  24.3  20.7  21.8  20.2  134.3   17.6   \n24  25  High As       BR06    1   97.7  20.7  14.3  21.2  11.8  131.0   25.6   \n25  26  High As       BR06    2   90.3  21.3  18.3  18.9  34.4  133.7   24.6   \n26  27  High As       BR06    3   91.0  18.3  14.3  13.2  58.2  132.7   24.5   \n27  28  High As       BR28    1   97.0  19.7  15.0  17.0  13.5  128.3   21.2   \n28  29  High As       BR28    2   92.3  26.3  17.7  21.1  21.3  126.0   28.7   \n29  30  High As       BR28    3   91.3  24.3  18.3  23.6  27.8  128.7   16.7   \n30  31  High As       BR35    1   94.3  22.7  12.3  10.0  55.9  154.0   35.2   \n31  32  High As       BR35    2  102.7  26.3  17.7  18.2  46.6  152.3   41.2   \n32  33  High As       BR35    3   97.3  22.7  14.0  22.2  52.5  151.7   43.3   \n33  34  High As       BR36    1  101.3  19.7  14.0  16.8  24.4  133.0   34.2   \n34  35  High As       BR36    2   94.7  22.0  17.7  24.5  28.5  133.7   30.8   \n35  36  High As       BR36    3   93.7  19.7  15.3  17.6  49.5  134.3   31.2   \n36  37  High As  Jefferson    1   72.7  10.3   9.0  11.5  26.6  127.0   14.2   \n37  38  High As  Jefferson    2   72.3   9.7   8.3  14.1  18.2  128.7   11.6   \n38  39  High As  Jefferson    3   80.0  13.3  11.0  23.0  12.6  127.0   16.3   \n39  40  High As  Kaybonnet    1   96.7  14.3   7.7   5.4  57.2  131.7   18.2   \n40  41  High As  Kaybonnet    2  101.0  15.7   8.0   5.2  82.8  130.7   28.7   \n41  42  High As  Kaybonnet    3  105.3  13.7  10.0  15.0  54.7  128.7   28.5   \n\n      GAs   STAs  \n0   0.762  14.60  \n1   0.722  10.77  \n2   0.858  12.69  \n3   1.053  18.23  \n4   1.130  13.72  \n5   1.011  15.97  \n6   0.965  14.49  \n7   0.969  16.02  \n8   0.893  15.25  \n9   1.358  21.23  \n10  1.359  19.37  \n11  1.290  20.30  \n12  0.832  19.23  \n13  0.903  12.34  \n14  0.932  15.78  \n15  0.610  13.50  \n16  0.605   9.32  \n17  0.629  11.41  \n18  1.005  15.89  \n19  1.020   9.30  \n20  0.946  12.59  \n21  1.482  25.41  \n22  1.548  19.12  \n23  1.564  22.27  \n24  1.451  24.15  \n25  1.413  18.77  \n26  1.396  21.46  \n27  1.521  28.49  \n28  1.553  30.96  \n29  1.698  29.73  \n30  2.448  26.22  \n31  2.493  20.97  \n32  2.458  23.59  \n33  1.881  24.75  \n34  1.997  19.40  \n35  1.934  22.08  \n36  1.897  23.45  \n37  1.872  18.60  \n38  2.007  21.02  \n39  1.888  20.27  \n40  1.889  22.51  \n41  1.767  21.39  , &lt;pyreadstat._readstat_parser.metadata_container object at 0x7e4bb72238e0&gt;)\n\n\n\n\nCode\nimport requests\n\n# Download the file using requests\nresponse = requests.get(data_folder + \"test_data.txt\")\n\nif response.status_code == 200:\n    # Extract the filename from the URL\n    filename = file_url.split(\"/\")[-1]\n # Save the content to a local file\n    with open(\"/content/\"+filename, \"wb\") as f:\n        f.write(response.content)\n    print(f\"File '{filename}' downloaded successfully.\")\nelse:\n    print(\"Failed to download the file.\")\n\n\nFile 'test_data.txt' downloaded successfully."
  },
  {
    "objectID": "data-import-export.html#working-directory-1-2",
    "href": "data-import-export.html#working-directory-1-2",
    "title": "Data Import-Export in Python",
    "section": "Working directory 1",
    "text": "Working directory 1\nIt would be best if you created a working directory in R to read and write files locally.\nBefore creating a working directory, you may check the directory of your current R session; the function getwd() will print the current working directory path as a string."
  }
]